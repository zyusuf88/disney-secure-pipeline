name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm deletion of all resources'
        required: true
        type: string
      env:
        description: 'Environment (dev/prod)'
        required: true
        type: choice
        options:
          - 'dev'
          - 'prod'
        default: 'dev'

permissions:
  contents: read
  id-token: write

jobs:
  terraform_destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'destroy'

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download tfvars from S3
        env:
          ENV_NAME: ${{ github.event.inputs.env }}
          BUCKET_NAME: ${{ secrets.TERRAFORM_STATE_BUCKET }}
        run: |
          mkdir -p env
          aws s3 cp s3://${BUCKET_NAME}/env/${ENV_NAME}.tfvars env/${ENV_NAME}.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.x"

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.env }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Select or Create Workspace
        env:
          ENV_NAME: ${{ github.event.inputs.env }}
        run: terraform workspace select -or-create=true "$ENV_NAME"

      - name: Terraform Destroy
        env:
          ENV_NAME: ${{ github.event.inputs.env }}
        run: terraform destroy -var-file="env/${ENV_NAME}.tfvars" -auto-approve

      - name: Delete Terraform Plan
        env:
          ENV_NAME: ${{ github.event.inputs.env }}
        run: aws s3 rm s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/tfplans/${ENV_NAME}-tfplan || true

  delete_ecr_image:
    name: "Delete ECR Image"
    runs-on: ubuntu-latest
    needs: terraform_destroy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract and Delete ECR Image from Plan
        env:
          ENV_NAME: ${{ github.event.inputs.env }}
        run: |
          if aws s3 ls s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/tfplans/${ENV_NAME}-tfplan; then
            aws s3 cp s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/tfplans/${ENV_NAME}-tfplan tfplan

            CONTAINER_IMAGE=$(terraform show -json tfplan | jq -r '.variables.container_image.value // empty')

            if [ -n "$CONTAINER_IMAGE" ]; then
              REPO=$(echo "$CONTAINER_IMAGE" | cut -d'/' -f2 | cut -d':' -f1)
              TAG=$(echo "$CONTAINER_IMAGE" | cut -d':' -f2)

              aws ecr batch-delete-image --repository-name $REPO --image-ids imageTag=$TAG || true
            fi
          fi
