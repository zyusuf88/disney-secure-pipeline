name: 4 ) Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "destroy" to confirm deletion of all resources'
        required: true
        type: string
      env:
        description: 'Environment (dev/prod)'
        required: true
        type: choice
        options: [dev, prod]
      container_image:
        description: "Full ECR image URI (e.g. 123456.dkr.ecr.eu-west-1.amazonaws.com/app/service:tag )"
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  terraform_destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'destroy'
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.2"

      - name: Download tfvars from S3
        run: |
          mkdir -p env
          aws s3 cp "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/env/${{ github.event.inputs.env }}.tfvars" \
                    "env/${{ github.event.inputs.env }}.tfvars"

      - name: Terraform init (S3 backend)
        run: terraform init -reconfigure -input=false

      - name: Workspace select - fail if missing
        run: |
          terraform workspace select "${{ github.event.inputs.env }}" \
          || { echo "::error::Workspace ${{ github.event.inputs.env }} does not exist"; exit 1; }

      - name: Terraform destroy
        env:
          TF_VAR_container_image: ${{ github.event.inputs.container_image }}
        run: terraform destroy -input=false -var-file="env/${{ github.event.inputs.env }}.tfvars" -auto-approve




  cleanup_workspace:
    runs-on: ubuntu-latest
    needs: terraform_destroy
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.2"

      - name: Terraform init (S3 backend)
        run: terraform init -reconfigure -input=false

      - name: Switch back to default workspace
        run: terraform workspace select default

      - name: Delete Terraform workspace
        run: terraform workspace delete -force "${{ github.event.inputs.env }}"
        continue-on-error: true

      - name: Delete saved plan artifact (optional)
        run: aws s3 rm "s3://${{ secrets.TERRAFORM_STATE_BUCKET }}/plans/${{ github.event.inputs.env }}/tfplan" || true

  delete_ecr_repo:
      runs-on: ubuntu-latest
      needs: cleanup_workspace
      steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Delete ECR repository (and all images)
        run: |
          IMAGE="${{ github.event.inputs.container_image }}"
          REPOSITORY=$(printf "%s" "$IMAGE" | cut -d'/' -f2- | cut -d'@' -f1 | cut -d':' -f1)
          aws ecr delete-repository --repository-name "$REPOSITORY" --force || true
