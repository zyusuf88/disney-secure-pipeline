.DS_Store
env/
!/.gitattributes
!/package.json
!/LICENSE
!/.npmignore
logs
*.log
TEST.md
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
*.lcov
.nyc_output
build/Release
node_modules/
jspm_packages/
*.tsbuildinfo
.eslintcache
*.tgz
.yarn-integrity
.cache
!/test/
!/tsconfig.json
!/tsconfig.dev.json
!/src/
/lib
/dist/
!/.eslintrc.json
/build/
!/project.json
.terragrunt*
/test-reports

.pre-commit-cache/

backend.hcl
tsconfig.dev.json
# Local .terraform directories
**/.terraform/*
# .tfstate files
*.tfstate
*.tfstate.*
backend.tf
# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

.tflint.hcl

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
